# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:06:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AuthException(RootModel[Any]):
    root: Any


class AvailabilityZone(
    RootModel[constr(pattern=r'^(\w+-){2,3}\d+\w+$', min_length=6, max_length=32)]
):
    root: constr(pattern=r'^(\w+-){2,3}\d+\w+$', min_length=6, max_length=32)


class EC2InstanceNotFoundException(RootModel[Any]):
    root: Any


class EC2InstanceStateInvalidException(RootModel[Any]):
    root: Any


class EC2InstanceTypeInvalidException(RootModel[Any]):
    root: Any


class EC2InstanceUnavailableException(RootModel[Any]):
    root: Any


class InstanceId(
    RootModel[constr(pattern=r'^i-[a-f0-9]+$', min_length=10, max_length=32)]
):
    root: constr(pattern=r'^i-[a-f0-9]+$', min_length=10, max_length=32)


class InstanceOSUser(
    RootModel[
        constr(
            pattern=r'^[A-Za-z_][A-Za-z0-9\@\._-]{0,30}[A-Za-z0-9\$_-]?$',
            min_length=1,
            max_length=32,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z_][A-Za-z0-9\@\._-]{0,30}[A-Za-z0-9\$_-]?$',
        min_length=1,
        max_length=32,
    )


class InvalidArgsException(RootModel[Any]):
    root: Any


class RequestId(RootModel[str]):
    root: str


class SSHPublicKey(RootModel[constr(min_length=80, max_length=4096)]):
    root: constr(min_length=80, max_length=4096)


class SendSSHPublicKeyRequest(BaseModel):
    AvailabilityZone_1: Optional[AvailabilityZone] = Field(
        None, alias='AvailabilityZone'
    )
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    InstanceOSUser_1: InstanceOSUser = Field(..., alias='InstanceOSUser')
    SSHPublicKey_1: SSHPublicKey = Field(..., alias='SSHPublicKey')


class SerialConsoleAccessDisabledException(RootModel[Any]):
    root: Any


class SerialConsoleSessionLimitExceededException(RootModel[Any]):
    root: Any


class SerialConsoleSessionUnavailableException(RootModel[Any]):
    root: Any


class SerialPort(RootModel[conint(ge=0, le=0)]):
    root: conint(ge=0, le=0)


class ServiceException(RootModel[Any]):
    root: Any


class Success(RootModel[bool]):
    root: bool


class ThrottlingException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    AWSEC2InstanceConnectService_SendSSHPublicKey = (
        'AWSEC2InstanceConnectService.SendSSHPublicKey'
    )


class XAmzTarget1(Enum):
    AWSEC2InstanceConnectService_SendSerialConsoleSSHPublicKey = (
        'AWSEC2InstanceConnectService.SendSerialConsoleSSHPublicKey'
    )


class SendSSHPublicKeyResponse(BaseModel):
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    Success_1: Optional[Success] = Field(None, alias='Success')


class SendSerialConsoleSSHPublicKeyRequest(BaseModel):
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    SSHPublicKey_1: SSHPublicKey = Field(..., alias='SSHPublicKey')
    SerialPort_1: Optional[SerialPort] = Field(None, alias='SerialPort')


class SendSerialConsoleSSHPublicKeyResponse(BaseModel):
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    Success_1: Optional[Success] = Field(None, alias='Success')
